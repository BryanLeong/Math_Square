/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_2 (
    input rst,
    input clk,
    input [3:0] buttons,
    output reg [17:0] op,
    output reg [35:0] num
  );
  
  
  
  integer i;
  integer j;
  
  reg [17:0] aluOP;
  reg [35:0] aluNUM;
  
  reg [10:0] lvl;
  
  reg [17:0] opTemp;
  reg [35:0] numTemp;
  
  wire [36-1:0] M_levels_num;
  wire [18-1:0] M_levels_op;
  levels_7 levels (
    .levelSelected(lvl),
    .num(M_levels_num),
    .op(M_levels_op)
  );
  
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_8 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_8 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_8 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_edge_detector4_out;
  reg [1-1:0] M_edge_detector4_in;
  edge_detector_8 edge_detector4 (
    .clk(clk),
    .in(M_edge_detector4_in),
    .out(M_edge_detector4_out)
  );
  wire [1-1:0] M_button_cond1_out;
  reg [1-1:0] M_button_cond1_in;
  button_conditioner_12 button_cond1 (
    .clk(clk),
    .in(M_button_cond1_in),
    .out(M_button_cond1_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_12 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_12 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_button_cond4_out;
  reg [1-1:0] M_button_cond4_in;
  button_conditioner_12 button_cond4 (
    .clk(clk),
    .in(M_button_cond4_in),
    .out(M_button_cond4_out)
  );
  reg [10:0] M_lvls_d, M_lvls_q = 1'h0;
  reg [17:0] M_operatorState_d, M_operatorState_q = 1'h0;
  reg [5:0] M_selectState_d, M_selectState_q = 1'h0;
  wire [6-1:0] M_marker_results;
  marker_16 marker (
    .clk(clk),
    .rst(rst),
    .op(aluOP),
    .num(aluNUM),
    .results(M_marker_results)
  );
  
  always @* begin
    M_lvls_d = M_lvls_q;
    M_selectState_d = M_selectState_q;
    M_operatorState_d = M_operatorState_q;
    
    lvl = 1'h0;
    for (i = 1'h0; i < 3'h6; i = i + 1) begin
      opTemp[(i)*3+2-:3] = 1'h1;
    end
    numTemp = M_levels_num;
    for (j = 1'h0; j < 3'h6; j = j + 1) begin
      if (M_operatorState_q[(j)*3+2-:3] == 1'h0) begin
        M_operatorState_d[(j)*3+2-:3] = 1'h1;
      end
    end
    op = M_operatorState_q;
    num = numTemp;
    M_button_cond1_in = buttons[0+0-:1];
    M_button_cond2_in = buttons[1+0-:1];
    M_button_cond3_in = buttons[2+0-:1];
    M_button_cond4_in = buttons[3+0-:1];
    M_edge_detector1_in = M_button_cond1_out;
    M_edge_detector2_in = M_button_cond2_out;
    M_edge_detector3_in = M_button_cond3_out;
    M_edge_detector4_in = M_button_cond4_out;
    if (M_edge_detector2_out) begin
      M_selectState_d = M_selectState_q + 1'h1;
    end
    if (M_selectState_q > 3'h5) begin
      M_selectState_d = 1'h0;
    end
    if (M_edge_detector1_out) begin
      if (M_selectState_q == 1'h0) begin
        M_selectState_d = 3'h5;
      end else begin
        M_selectState_d = M_selectState_q - 1'h1;
      end
    end
    if (M_edge_detector3_out) begin
      M_operatorState_d[(M_selectState_q)*3+2-:3] = M_operatorState_q[(M_selectState_q)*3+2-:3] + 1'h1;
    end
    if (M_operatorState_q[(M_selectState_q)*3+2-:3] > 3'h4) begin
      M_operatorState_d[(M_selectState_q)*3+2-:3] = 1'h1;
    end
    if (M_edge_detector4_out) begin
      aluOP = M_operatorState_q;
    end
    aluNUM = M_levels_num;
    if (M_marker_results == 6'h3f) begin
      M_lvls_d = M_lvls_q + 1'h1;
      lvl = lvl + 1'h1;
      numTemp = M_levels_num;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_lvls_q <= 1'h0;
      M_operatorState_q <= 1'h0;
      M_selectState_q <= 1'h0;
    end else begin
      M_lvls_q <= M_lvls_d;
      M_operatorState_q <= M_operatorState_d;
      M_selectState_q <= M_selectState_d;
    end
  end
  
endmodule
