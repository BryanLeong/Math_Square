/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input button1,
    input button2,
    input button3,
    output reg mosi0,
    output reg cs0,
    output reg sck0,
    output reg mosi1,
    output reg cs1,
    output reg sck1,
    output reg mosi2,
    output reg cs2,
    output reg sck2
  );
  
  
  
  reg rst;
  
  integer i;
  integer j;
  integer k;
  
  reg [2:0] buttons;
  
  wire [1-1:0] M_display_mosi0;
  wire [1-1:0] M_display_cs0;
  wire [1-1:0] M_display_sck0;
  wire [1-1:0] M_display_mosi1;
  wire [1-1:0] M_display_cs1;
  wire [1-1:0] M_display_sck1;
  wire [1-1:0] M_display_mosi2;
  wire [1-1:0] M_display_cs2;
  wire [1-1:0] M_display_sck2;
  reg [36-1:0] M_display_num;
  reg [18-1:0] M_display_op;
  display_1 display (
    .clk(clk),
    .rst(rst),
    .num(M_display_num),
    .op(M_display_op),
    .mosi0(M_display_mosi0),
    .cs0(M_display_cs0),
    .sck0(M_display_sck0),
    .mosi1(M_display_mosi1),
    .cs1(M_display_cs1),
    .sck1(M_display_sck1),
    .mosi2(M_display_mosi2),
    .cs2(M_display_cs2),
    .sck2(M_display_sck2)
  );
  wire [18-1:0] M_game_op;
  wire [36-1:0] M_game_num;
  game_2 game (
    .clk(clk),
    .rst(rst),
    .buttons(buttons),
    .op(M_game_op),
    .num(M_game_num)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    buttons[0+0-:1] = button1;
    buttons[1+0-:1] = button2;
    buttons[2+0-:1] = button3;
    mosi0 = M_display_mosi0;
    cs0 = M_display_cs0;
    sck0 = M_display_sck0;
    mosi1 = M_display_mosi1;
    cs1 = M_display_cs1;
    sck1 = M_display_sck1;
    mosi2 = M_display_mosi2;
    cs2 = M_display_cs2;
    sck2 = M_display_sck2;
    M_display_num[0+0+3-:4] = M_game_num[0+3-:4];
    M_display_num[0+4+3-:4] = M_game_num[4+3-:4];
    M_display_num[0+8+3-:4] = M_game_num[8+3-:4];
    M_display_num[12+0+3-:4] = M_game_num[12+3-:4];
    M_display_num[12+4+3-:4] = M_game_num[16+3-:4];
    M_display_num[12+8+3-:4] = M_game_num[20+3-:4];
    M_display_num[24+0+3-:4] = M_game_num[24+3-:4];
    M_display_num[24+4+3-:4] = M_game_num[28+3-:4];
    M_display_num[24+8+3-:4] = M_game_num[32+3-:4];
    for (i = 1'h0; i < 3'h6; i = i + 1) begin
      M_display_op[(i)*3+2-:3] = M_game_op[(i)*3+2-:3];
    end
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led = 8'h00;
  end
endmodule
