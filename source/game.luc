module game (
    input rst,
    input clk,
    input buttons[7],
        
    output op[6][3],
    output num[9][4],
    output res[6]
  ) {
  
  sig opTemp[6][3];  
    
  levels levels;
     
  .clk(clk) {
    .rst(rst) { 
       operator_button operator_button1(.button(buttons[0]));  // Button to change the state 
       operator_button operator_button2(.button(buttons[1]));  // Button to change the state 
       operator_button operator_button3(.button(buttons[2]));  // Button to change the state 
       operator_button operator_button4(.button(buttons[3]));  // Button to change the state 
       operator_button operator_button5(.button(buttons[4]));  // Button to change the state 
       operator_button operator_button6(.button(buttons[5]));  // Button to change the state
     }       
      
     // For the button checker
     edge_detector edge_detector(#RISE(1), #FALL(0)); // detect rising edges    
     button_conditioner button_cond;     // button input conditioner 
       
    // States  
    .rst(rst) {
      dff lvls[4];
      marker marker;  // ALU connection
    }
  }

  always {
    button_cond.in = buttons[6];            // raw button input   
    edge_detector.in = button_cond.out; 
    
    opTemp[0] = operator_button1.op; 
    opTemp[1] = operator_button2.op; 
    opTemp[2] = operator_button3.op; 
    opTemp[3] = operator_button4.op; 
    opTemp[4] = operator_button5.op; 
    opTemp[5] = operator_button6.op;   
    
    // Setting the output
    op = opTemp; 
    num = levels.num[lvls.q];  // Numbers to the level
    
    marker.op = opTemp;
    marker.num = levels.num[lvls.q];
    
    res = marker.results;
    
    // Check if correct
    if (edge_detector.out) {
      if (marker.results == 6b111111) {
        lvls.d = lvls.q + 1;
        if (lvls.q > 9) {
          lvls.d = 0;
        }
      }   
    }
  }
}